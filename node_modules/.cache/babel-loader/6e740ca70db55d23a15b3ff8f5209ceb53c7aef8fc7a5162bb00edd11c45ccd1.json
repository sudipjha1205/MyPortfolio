{"ast":null,"code":"// store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './Reducers';\nimport { RESTORE_STATE } from './actions';\nconst LOCAL_STORAGE_KEY = 'reduxState';\nconst localStorageMiddleware = store => next => action => {\n  const result = next(action);\n  const state = store.getState();\n\n  // Save the state to localStorage after each action\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n  return result;\n};\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(localStorageMiddleware)\n  // Add other middleware or configuration options if needed\n});\n\n// Retrieve the state from localStorage when the store initializes\nconst storedState = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\nif (storedState) {\n  store.dispatch({\n    type: RESTORE_STATE,\n    payload: storedState\n  });\n}\nexport default store;","map":{"version":3,"names":["configureStore","rootReducer","RESTORE_STATE","LOCAL_STORAGE_KEY","localStorageMiddleware","store","next","action","result","state","getState","localStorage","setItem","JSON","stringify","reducer","middleware","getDefaultMiddleware","concat","storedState","parse","getItem","dispatch","type","payload"],"sources":["/home/sudip/portfolio/src/Components/Redux/store.js"],"sourcesContent":["// store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './Reducers';\nimport { RESTORE_STATE } from './actions';\n\nconst LOCAL_STORAGE_KEY = 'reduxState';\n\nconst localStorageMiddleware = (store) => (next) => (action) => {\n  const result = next(action);\n  const state = store.getState();\n\n  // Save the state to localStorage after each action\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n\n  return result;\n};\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(localStorageMiddleware),\n  // Add other middleware or configuration options if needed\n});\n\n// Retrieve the state from localStorage when the store initializes\nconst storedState = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\nif (storedState) {\n  store.dispatch({ type: RESTORE_STATE, payload: storedState });\n}\n\nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,YAAY;AACpC,SAASC,aAAa,QAAQ,WAAW;AAEzC,MAAMC,iBAAiB,GAAG,YAAY;AAEtC,MAAMC,sBAAsB,GAAIC,KAAK,IAAMC,IAAI,IAAMC,MAAM,IAAK;EAC9D,MAAMC,MAAM,GAAGF,IAAI,CAACC,MAAM,CAAC;EAC3B,MAAME,KAAK,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC;;EAE9B;EACAC,YAAY,CAACC,OAAO,CAACT,iBAAiB,EAAEU,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC,CAAC;EAE9D,OAAOD,MAAM;AACf,CAAC;AAED,MAAMH,KAAK,GAAGL,cAAc,CAAC;EAC3Be,OAAO,EAAEd,WAAW;EACpBe,UAAU,EAAGC,oBAAoB,IAAKA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACd,sBAAsB;EAC1F;AACF,CAAC,CAAC;;AAEF;AACA,MAAMe,WAAW,GAAGN,IAAI,CAACO,KAAK,CAACT,YAAY,CAACU,OAAO,CAAClB,iBAAiB,CAAC,CAAC;AACvE,IAAIgB,WAAW,EAAE;EACfd,KAAK,CAACiB,QAAQ,CAAC;IAAEC,IAAI,EAAErB,aAAa;IAAEsB,OAAO,EAAEL;EAAY,CAAC,CAAC;AAC/D;AAEA,eAAed,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}